package com.cisco.security.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.cisco.security.controller.UrlController;
import com.cisco.security.model.Url;
import com.cisco.security.model.Url.ThreatType;
import com.cisco.security.service.UrlService;
import com.fasterxml.jackson.databind.ObjectMapper;

public class UrlControllerTest {

	private static final ObjectMapper mapper = new ObjectMapper();

	@Mock
	private UrlService service;

	@InjectMocks
	private UrlController urlController;

	private Url url;

	private MockMvc mockMvc;

	private String host = "ama-alliance.com", path = "path/to/page", query = "name=ferret&color=purple";

	private int port = 8080;

	private List<Url> urls = new ArrayList<>();

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		this.mockMvc = MockMvcBuilders.standaloneSetup(urlController).build();
		url = new Url(host, port, path, query, ThreatType.MALWARE);
		urls.add(url);

	}

	@Test
	public void testCreate() throws Exception {
		when(service.save(Mockito.any(Url.class))).thenReturn(url);
		mockMvc.perform(
				post("/urlinfo/1").contentType(MediaType.APPLICATION_JSON).content(mapper.writeValueAsString(url)))
				.andExpect(status().isOk());
	}

	@Test
	public void testGet() throws Exception {
		when(service.find(host, port, path, query)).thenReturn(urls);
		String hostAndPort = host + ":" + port;
		String pathAndQuery = path + "?" + query;
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/urlinfo/1")
				.contentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE).param("hostname_and_port", hostAndPort)
				.param("original_path_and_query_string", pathAndQuery);
		mockMvc.perform(builder).andExpect(status().isOk());
	}

	@Test
	public void testGetAll() throws Exception {
		Url url2 = new Url("example.com", 0, "path/to/page", "name=ferret&color=purple",
				ThreatType.THREAT_TYPE_UNSPECIFIED);
		urls.add(url2);
		when(service.findAll()).thenReturn(urls);
		mockMvc.perform(get("/urlinfo/1/all")).andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
				.andExpect(jsonPath("$", hasSize(2))).andExpect(status().isOk());
		verify(service, times(1)).findAll();
	}

}
