package com.cisco.tps.model;

import java.util.List;
import org.junit.Before;
import com.openpojo.random.RandomFactory;
import com.openpojo.reflection.PojoClass;
import com.openpojo.reflection.PojoMethod;
import com.openpojo.reflection.impl.PojoClassFactory;
import com.openpojo.validation.Validator;
import com.openpojo.validation.ValidatorBuilder;
import com.openpojo.validation.rule.impl.GetterMustExistRule;
import com.openpojo.validation.rule.impl.SetterMustExistRule;
import com.openpojo.validation.test.impl.GetterTester;
import com.openpojo.validation.test.impl.SetterTester;
import com.openpojo.validation.test.impl.ToStringTester;

public abstract class AbstractPojoTest {

  private Validator ACCESSOR_VALIDATOR;

  private Validator TO_STRING_VALIDATOR;

  @Before
  public void init() {
    ACCESSOR_VALIDATOR =
        ValidatorBuilder.create().with(new GetterMustExistRule()).with(new SetterMustExistRule())
            .with(new SetterTester()).with(new GetterTester()).build();
    TO_STRING_VALIDATOR = ValidatorBuilder.create().with(new ToStringTester()).build();

  }

  public void testSetterGetters(final Class<?> clazz) {
    PojoClass pojoClass = PojoClassFactory.getPojoClass(clazz);
    ACCESSOR_VALIDATOR.validate(pojoClass);
  }

  public void testConstructors(final Class<?> clazz) {
    PojoClass pojoClass = PojoClassFactory.getPojoClass(clazz);
    List<PojoMethod> list = pojoClass.getPojoConstructors();
    for (PojoMethod method : list) {
      Class<?>[] types = method.getParameterTypes();
      int count = types.length;
      Object[] values = new Object[count];
      for (int i = 0; i < count; i++) {
        values[i] = RandomFactory.getRandomValue(types[i]);
      }
      method.invoke(null, values);
    }
  }

  public void testToString(final Class<?> clazz) {
    TO_STRING_VALIDATOR.validate(PojoClassFactory.getPojoClass(clazz));
  }

  protected void testClass(Class<?> clazz) {
    testSetterGetters(clazz);
    testConstructors(clazz);
  }

  abstract public void testPojo();

}
