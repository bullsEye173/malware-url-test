package com.cisco.security.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import com.cisco.security.model.Url;
import com.cisco.security.service.UrlService;
import org.springframework.http.MediaType;

import java.net.URL;
import java.util.List;

@RestController
@RequestMapping("/urlinfo")
public class UrlController {

	@Autowired
	UrlService service;

	@GetMapping(value = "/1", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public List<Url> urlInfo(@RequestParam(required = true) String hostname_and_port,
			@RequestParam(required = false) String original_path_and_query_string) {
		String[] split = hostname_and_port.split(":");
		String host = split[0];
		Integer port = 0;
		if (split.length > 1) {
			port = Integer.valueOf(split[1]);
		}

		String path = "";
		String query = "";
		if (original_path_and_query_string != null) {
			String[] split2 = original_path_and_query_string.split("\\?");
			path = split2[0];
			if (split2.length > 1) {
				query = split2[1];
			}
		}
		boolean urlValid = validateUrl(host, port, path, query);
		if (!urlValid) {
			throw new IllegalArgumentException("url parameters are invalid");
		}
		return service.find(host, port, path, query);
	}

	@PostMapping(value = "/1", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public Url save(@RequestBody(required = true) Url url) {
		boolean urlValid = validateUrl(url.getHost(), url.getPort(), url.getPath(), url.getQuery());
		if (!urlValid) {
			throw new IllegalArgumentException("url parameters are invalid");
		}
		return service.save(url);
	}

	@GetMapping(value = "/1/all", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public List<Url> findAll() {
		return service.findAll();
	}

	public boolean validateUrl(String host, Integer port, String path, String query) {
		StringBuilder sb = new StringBuilder("http://");
		sb.append(host).append(":").append(port).append("/").append(path).append("?").append(query);
		String urlStr = sb.toString();
		try {
			new URL(urlStr).toURI();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@ExceptionHandler(IllegalArgumentException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public final Error exceptionHandlerIllegalArgumentException(final IllegalArgumentException e) {
		return new Error(e.getMessage());
	}

	@ExceptionHandler(MethodArgumentTypeMismatchException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public final Error exceptionHandlerMethodArgumentTypeMismatchException(
			final MethodArgumentTypeMismatchException e) {
		if (e.getName().equals("port")) {
			return new Error("port is invalid. Please, provide a numeric port.");
		} else {
			return new Error("Invalid request parameter: " + e.getName());
		}
	}

}
